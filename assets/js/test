
// Form submission handler
document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById("registrationForm");

if (form) {
  form.addEventListener("submit", async function (event) {
    event.preventDefault();

    // Show loading state
    const submitButton = form.querySelector('button[type="submit"]');
    const originalButtonText = submitButton ? submitButton.innerHTML : "Submit";
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.innerHTML = "Submitting...";
    }

    // Remove any existing messages
    const existingMessages = form.querySelectorAll(".form-message");
    existingMessages.forEach((el) => el.remove());

    // Create FormData object
    const formData = new FormData(form);

    const formDataObj = {};
    const teamMembers = [];

    formData.forEach((value, key) => {

      if (key.startsWith("member") && key.match(/member(\d+)/)) {
        const memberIndex = parseInt(key.match(/member(\d+)/)[1]) - 1;
        const fieldName = key.replace(/member\d+/, "");

        // Initialize team member object if it doesn't exist
        if (!teamMembers[memberIndex]) {
          teamMembers[memberIndex] = {};
        }

        const apiFieldMapping = {
          Name: "teamMemberFullName",
          Email: "teamMemberEmail",
          Phone: "teamMemberPhone",
          Role: "teamMemberRole",
          LinkedIn: "teamMemberLinkedIn",
          Country: "teamMemberCountry",
          Nationality: "teamMemberNationality",
          Age: "teamMemberAge",
          Gender: "teamMemberGender",
        };

        // Set the value in the team member object
        if (apiFieldMapping[fieldName]) {
          teamMembers[memberIndex][apiFieldMapping[fieldName]] = value;
        }
      } else {

        const apiFieldMapping = {
          teamName: "teamName",
          teamSize: "teamSize",
          leaderName: "teamLeaderFullName",
          leaderEmail: "teamLeaderEmail",
          leaderPhone: "teamLeaderPhone",
          leaderLinkedIn: "teamLeaderLinkedIn",
          leaderCountry: "teamLeaderCountry",
          leaderNationality: "teamLeaderNationality",
          leaderAge: "teamLeaderAge",
          leaderGender: "teamLeaderGender",
          projectTitle: "projectTitle",
          ideaSummary: "ideaSummary",
          problemSolving: "problemSolving",
          technology: "technology",
          alignment: "alignment",
          hasPrototype: "hasPrototype",
          prototypeURL: "prototypeURL",
          projectRepo: "projectRepo",
          heardAbout: "heardAbout",
          hasParticipated: "hasParticipated",
          pastHackathons: "pastHackathons",
          availability: "availability",
        };

        // Use the mapping or the original key if no mapping exists
        const apiKey = apiFieldMapping[key] || key;
        formDataObj[apiKey] = value;
      }
    });

    // Add team members to the form data object
    if (teamMembers.length > 0) {
      formDataObj.teamMembers = teamMembers;
    }

    console.log("Form data being sent:", formDataObj);

    // Fetch credentials from secret.yml
    const credentialsResponse = await fetch("/secret.yml");
    if (!credentialsResponse.ok) {
      throw new Error("Failed to load authentication credentials");
    }
    
    const yamlText = await credentialsResponse.text();
    
    // Parse YAML content
    const lines = yamlText.split("\n");
    const credentials = {};

    lines.forEach((line) => {
      if (line.includes(":")) {
        const [key, value] = line.split(":").map((part) => part.trim());
        if (key && value) {
          credentials[key] = value;
        }
      }
    });

    if (!credentials.username || !credentials.password) {
      throw new Error("Authentication credentials not found");
    }

    // Create Basic Auth header
    const authHeader = "Basic " + btoa(credentials.username + ":" + credentials.password);

    // Send data to API
    const response = await fetch("https://gfa-tech.com/afcfta-api/api/hackathon", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: authHeader,
      },
      body: JSON.stringify(formDataObj),
    });

    console.log("Response status:", response.status);
    
    // Parse the response
    const responseData = await response.json();
    
    if (!response.ok) {
      throw { 
        status: response.status,
        data: responseData 
      };
    }

    // Handle successful submission
    console.log("Success data:", responseData);

    // Create success message
    const successDiv = document.createElement("div");
    successDiv.className = "form-message success-message";
    successDiv.style.color = "green";
    successDiv.style.padding = "15px";
    successDiv.style.marginBottom = "20px";
    successDiv.style.backgroundColor = "#e8f5e9";
    successDiv.style.borderRadius = "5px";
    successDiv.innerHTML =
      "<strong>Application submitted successfully!</strong><br>Thank you for your submission.";

    form.prepend(successDiv);
    successDiv.scrollIntoView({ behavior: "smooth" });

    // Reset form
    form.reset();
  }).catch((error) => {
    // Handle errors
    console.error("Error submitting form:", error);

    // Create error message
    const errorDiv = document.createElement("div");
    errorDiv.className = "form-message error-message";
    errorDiv.style.color = "red";
    errorDiv.style.padding = "15px";
    errorDiv.style.marginBottom = "20px";
    errorDiv.style.backgroundColor = "#ffebee";
    errorDiv.style.borderRadius = "5px";

    if (error.data?.messages) {
      errorDiv.innerHTML = "<strong>Validation errors:</strong><br>" + 
        Object.entries(error.data.messages)
          .map(([field, message]) => `- ${field}: ${message}`)
          .join("<br>");
    } else if (error.data?.message) {
      // Display the specific error message from the API
      errorDiv.innerHTML = "<strong>Error submitting application:</strong><br>" + 
        error.data.message + 
        (error.data.details ? "<br>" + error.data.details : "");
    } else {
      errorDiv.innerHTML = "<strong>Error submitting application:</strong><br>" + 
        (error.message || "Please check your network connection and try again");
    }

    form.prepend(errorDiv);
    errorDiv.scrollIntoView({ behavior: "smooth" });
  }).finally(() => {
    // Restore submit button regardless of success or failure
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.innerHTML = originalButtonText;
    }
  }
